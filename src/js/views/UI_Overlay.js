// src/js/views/UIOverlay.js
export default class UIOverlay {
	/**
	 * @param {Object} options ‚Äì –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	 */
	constructor(options = {}) {
		// –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∫–ª–∞—Å—Å–æ–º "ui", —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ body
		this.container = document.querySelector('.ui');
		if (!this.container) {
			this.container = document.createElement('div');
			this.container.classList.add('ui');
			document.body.appendChild(this.container);
		}
		this.options = options;
		this.createUIElements();
		this.attachEvents();
	}

	createUIElements() {
		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
		this.finishTurnButton = document.createElement('button');
		this.finishTurnButton.id = 'finishTurnButton';
		this.finishTurnButton.textContent = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥';
		this.container.appendChild(this.finishTurnButton);

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
		this.undoButton = document.createElement('button');
		this.undoButton.id = 'undoButton';
		this.undoButton.textContent = '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ';
		this.container.appendChild(this.undoButton);

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç
		this.swapCardsButton = document.createElement('button');
		this.swapCardsButton.id = 'swapCards';
		this.swapCardsButton.textContent = '–ü–æ–º–µ–Ω—è—Ç—å –∫–∞—Ä—Ç—ã';
		this.container.appendChild(this.swapCardsButton);

		// –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π div –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–∞—Ö, –∫–æ–ª–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–¥–∞
		this.infoDiv = document.createElement('div');
		this.infoDiv.classList.add('info');
		this.container.appendChild(this.infoDiv);
	}

	attachEvents() {
		this.finishTurnButton.addEventListener('click', () => {
			if (this.options.onEndTurn) {
				this.options.onEndTurn();
			}
		});
		this.undoButton.addEventListener('click', () => {
			if (this.options.onUndo) {
				this.options.onUndo();
			}
		});
		this.swapCardsButton.addEventListener('click', () => {
			if (this.options.onSwap) {
				this.options.onSwap();
			}
		});
	}

	/**
	 * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
	 * @param {Object} gameState - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ players, player_id, deck_cards_count, time –∏ —Ç.–¥.
	 */
	render(gameState) {
		let html = `<div class="game-info">`;
		// 1) –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ player_id)
		const currentPlayer = gameState.players.find((p) => p.id === gameState.player_id);
		const turnPlayer = gameState.players.find((p) => p.id === gameState.current_turn_id);
		if (currentPlayer) {
			html += `<div class="current-player">
                <strong>–í—ã:</strong> ${currentPlayer.nickname} 
                (${currentPlayer.cards_count} –∫–∞—Ä—Ç)
								<br/>
								–•–æ–¥: ${turnPlayer.nickname} 
              </div>`;
		}
		// 2) –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ –∫—Ä—É–≥—É)
		html += `<div class="other-players">`;
		let currentIndex = gameState.players.findIndex((p) => p.id === gameState.player_id);
		for (let i = 1; i < gameState.players.length; i++) {
			const idx = (currentIndex + i) % gameState.players.length;
			const player = gameState.players[idx];
			html += `<div class="player-info">
                ${player.nickname}: 
                <div class="cards">`;
			// –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–æ–∫, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç (cards_count)
			for (let j = 0; j < player.cards_count; j++) {
				html += `<span class="card-icon">üÇ†</span>`;
			}
			html += `   </div>
              </div>`;
		}
		html += `</div>`;
		// 3) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
		html += `<div class="deck-info">–ö–æ–ª–æ–¥–∞: ${gameState.deck_cards_count} –∫–∞—Ä—Ç</div>`;
		// 4) –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ö–æ–¥–∞
		html += `<div class="turn-time">–í—Ä–µ–º—è —Ö–æ–¥–∞: ${gameState.time}</div>`;
		html += `</div>`;

		this.infoDiv.innerHTML = html;
	}
}
